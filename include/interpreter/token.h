#ifndef CFG_TOKEN_H
#define CFG_TOKEN_H

#include <interpreter/token_type.h>
#include <cfg/cfg.h>
#include <tml/tml_string.h>

namespace cfg
{
	/**
	 * A simple token class. These are generated by Lexer and consumed by Parser.
	 */
	class Token final {
	public:
		Token(TokenType type, char ch)
			:mType(type),
			mCh(ch),
			mValue()
		{
		}

		Token(TokenType type, const Value& value)
				:mType(type),
				mCh('\0'),
				mValue(value)
		{
		}

		TokenType getType() const { return mType; }
		char getCh() const { return mCh; }

		const Value& getValue() const { return mValue; }

		std::string getText() const {
			if (!mValue.isEmpty()) {
				std::string text = tmlstring::valueToString(0, mValue);
				if (!text.empty() && text[text.size() - 1] == '\n') {
					text.pop_back();
				}
				return text;
			}
			return std::string(1, mCh);
		}

	private:
		TokenType mType;
		char mCh;
		Value mValue;
	};
}

#endif
